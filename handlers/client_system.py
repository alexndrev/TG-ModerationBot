from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from configure.config import *
from configure.database import *

storage = MemoryStorage()
bot = Bot(token=token, parse_mode=parse_mode)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(text=['rep', '—Ä–µ–ø', '+r'])
async def rep_system(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    if message.reply_to_message.from_user.id != message.from_user.id:
        cursor.execute(f"SELECT name FROM users where id = {message.reply_to_message.from_user.id}")
        plus = 1
        UpdateValue('plRep', plus, message.reply_to_message.from_user.id)
        con.commit()
        for row in cursor.execute(f"SELECT * FROM users where id={message.reply_to_message.from_user.id}"):
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!\n\n*–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*  `{plRep} üü¢ / {mnRep} üî¥`'.format(plRep=row[3], mnRep=row[4]))
    else:
        await message.reply('–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ!')


@dp.message_handler(text=['rep', '—Ä–µ–ø', '+r'])
async def derep_system(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    if message.reply_to_message.from_user.id != message.from_user.id:
        cursor.execute(f"SELECT name FROM users where id = {message.reply_to_message.from_user.id}")
        minus = 1
        UpdateValue('mnRep', minus, message.reply_to_message.from_user.id)
        con.commit()
        for row in cursor.execute(f"SELECT * FROM users where id={message.reply_to_message.from_user.id}"):
            await message.answer('–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–Ω–∏–∂–µ–Ω–∞!\n\n*–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*  `{plRep} üü¢ / {mnRep} üî¥`'.format(plRep=row[3], mnRep=row[4]))
    else:
        await message.reply('–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ!')


@dp.message_handler(text='id')
async def id_system(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    await message.reply(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{message.reply_to_message.from_user.id}`\n")


@dp.message_handler(text=["hug" '–æ–±–Ω—è—Ç—å'])
async def hug_system(message):
    await message.reply(f"<b><a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a></b> –æ–±–Ω—è–ª <b><a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.first_name}</a></b> ü§ó", parse_mode = "html")


@dp.message_handler(text=["kiss", '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'])
async def kiss_system(message):
    await message.reply(f"<b><a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a></b> –ø–æ—Ü–µ–ª–æ–≤–∞–ª <b><a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.first_name}</a></b> üíã", parse_mode = "html")


@dp.message_handler(text=["intim", '–∏–Ω—Ç–∏–º'])
async def intim_system(message):
    await message.reply(f"<b><a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a></b> –ø—Ä–∏–Ω—É–¥–∏–ª –∫ –∏–Ω—Ç–∏–º—É <b><a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.first_name}</a></b> ‚ù§Ô∏è‚Äçüî•", parse_mode = "html")


@dp.message_handler(text=["kill", '—É–±–∏—Ç—å'])
async def kill_system(message):
    await message.reply(f"<b><a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a></b> —É–±–∏–ª <b><a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.first_name}</a></b> üî´", parse_mode = "html")


@dp.message_handler(text=["dashboard", '—Ç–æ–ø'])
async def dashboard_system(message):
    cursor.execute(f"SELECT id, plRep, mnRep, name FROM users ORDER BY plRep DESC LIMIT 10")
    leadermsg = "<b>–¢–æ–ø –µ–∫—Å–ø–µ—Ä—Ç–æ–≤ —á–∞—Ç–∞</b>\n\n"
    fetchleader = cursor.fetchall()
    for i in fetchleader:
        ids = f"<b><a href='tg://user?id={i[0]}'>{i[0]}</a></b>"
        leadermsg += f"{fetchleader.index(i) + 1}| {ids}:  <b>{i[1]}</b> üü¢ / <b>{i[2]}</b> üî¥\n"
        fl3 = leadermsg.replace("3|", "ü•â|")
        fl2 = fl3.replace("2|", "ü•à|")
        fl = fl2.replace("1|", "ü•á|")
    await message.answer(str(fl), parse_mode="html")


def register_handlers_client_system(dp: Dispatcher):
    dp.register_message_handler(rep_system, text=['rep', '—Ä–µ–ø', '+r'])
    dp.register_message_handler(derep_system, text=['rep', '—Ä–µ–ø', '-r'])
    dp.register_message_handler(id_system, text='id')
    dp.register_message_handler(hug_system, text=["hug" '–æ–±–Ω—è—Ç—å'])
    dp.register_message_handler(kiss_system, text=["kiss", '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'])
    dp.register_message_handler(intim_system, text=["intim", '–∏–Ω—Ç–∏–º'])
    dp.register_message_handler(kill_system, text=["kill", '—É–±–∏—Ç—å'])
    dp.register_message_handler(dashboard_system, text=["dashboard", '—Ç–æ–ø'])
